<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springboot.mapper.BorrowMapper">
    <!--新增-->
    <insert id="save">
        insert into borrow (book_name, book_no, user_name, user_id, user_phone, score, days, return_date)
        values (#{bookName}, #{bookNo}, #{userName}, #{userId}, #{userPhone}, #{score}, #{days}, #{returnDate})
    </insert>
    <!--修改-->
    <update id="updateById">
        update borrow
        <set>
            <if test="name != null and name != ''">
                book_name = #{bookName},
            </if>
            <if test="bookNo != null and bookNo != ''">
                book_no = #{bookNo},
            </if>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="userId != null and userId != ''">
                user_id = #{userId},
            </if>
            <if test="userPhone != null and userPhone != ''">
                user_phone = #{userPhone},
            </if>
            <if test="score != null and score != ''">
                score = #{score},
            </if>
            <if test="status != null and status != ''">
                status = #{status},
            </if>
            <if test="days != null and days != ''">
                days = #{days},
            </if>
            <if test="returnDate != null and returnDate != ''">
                return_date = #{score},
            </if>

        </set>
        where id = #{id}
    </update>
    <!-- 修改状态 -->
    <update id="updateStatus">
      update borrow set status = #{status} where id = #{id}
    </update>
    <!--根据id删除-->
    <delete id="delete">
        delete from borrow where id = #{id}
    </delete>

    <!--查询全部-->
    <select id="list" resultType="com.example.springboot.entity.Borrow">
        select * from borrow order by id desc
    </select>
    <!--分页查询-->
    <select id="listByCondition" resultType="com.example.springboot.entity.Borrow">
        select * from borrow
        <where>
            <if test="bookName != null and bookName != ''">
                book_name like concat('%', #{bookName}, '%')
            </if>
        </where>
        order by id desc
    </select>
    <!--通过id查询-->
    <select id="getById" resultType="com.example.springboot.entity.Borrow">
        select * from borrow where id = #{id}
    </select>

    <!--分页查询 还书模块-->
    <select id="listReturByCondition" resultType="com.example.springboot.entity.Retur">
        select * from retur
        <where>
            <if test="bookName != null and bookName != ''">
                book_name like concat('%', #{bookName}, '%')
            </if>
        </where>
        order by id desc
    </select>
    <!-- 统计数据 -->
    <select id="getCountByTimeRange" resultType="com.example.springboot.controller.request.BorrowReTURcOUNTPO">
        select count(id) as count, DATE_FORMAT(createtime, '%Y-%m-%d') as date from
        <if test="type == 1">
            borrow
        </if>
        <if test="type == 2">
            retur
        </if>
        where
        <choose>
            <when test="timeRange == 'week'">
                createtime >= DATE_SUB(NOW(),INTERVAL 1 WEEK)
            </when>
            <when test="timeRange == 'month'">
                createtime >= DATE_SUB(NOW(),INTERVAL 1 MONTH)
            </when>
            <when test="timeRange == 'month2'">
                createtime >= DATE_SUB(NOW(),INTERVAL 2 MONTH)
            </when>
            <when test="timeRange == 'month3'">
                createtime >= DATE_SUB(NOW(),INTERVAL 3 MONTH)
            </when>
            <otherwise>
                createtime > now()
            </otherwise>
        </choose>
        group by date
    </select>
    <!--新增  还书模块-->
    <insert id="saveRetur">
        insert into retur (book_name, book_no, user_name, user_id, user_phone, score, days, return_date, real_date)
        values (#{bookName}, #{bookNo}, #{userName}, #{userId}, #{userPhone}, #{score}, #{days}, #{returnDate}, #{realDate})
    </insert>
    <!--删除  还书模块-->
    <delete id="deleteReturById">
        delete from retur where id = #{id}
    </delete>
</mapper>